{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Mishago_PythonUrban_kgiop_objects.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/pauligone/py.urban/blob/main/streets_with_contains_kgiop.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vGDfbdLe5PUs"
      },
      "source": [
        "# Итоговый проект. Улицы. Объекты культурного наследия."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# собрали модули в начале проекта\n",
        "!pip install folium -U\n",
        "!pip install geopandas mapclassify osmnx"
      ],
      "metadata": {
        "id": "YDz_w4ncmVMT",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f07a2362-7683-4911-938d-13e23a591a01"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: folium in /usr/local/lib/python3.7/dist-packages (0.12.1.post1)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from folium) (2.28.1)\n",
            "Requirement already satisfied: branca>=0.3.0 in /usr/local/lib/python3.7/dist-packages (from folium) (0.5.0)\n",
            "Requirement already satisfied: jinja2>=2.9 in /usr/local/lib/python3.7/dist-packages (from folium) (2.11.3)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from folium) (1.21.6)\n",
            "Requirement already satisfied: MarkupSafe>=0.23 in /usr/local/lib/python3.7/dist-packages (from jinja2>=2.9->folium) (2.0.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->folium) (2.10)\n",
            "Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->folium) (1.24.3)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->folium) (2022.6.15)\n",
            "Requirement already satisfied: charset-normalizer<3,>=2 in /usr/local/lib/python3.7/dist-packages (from requests->folium) (2.1.0)\n",
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: geopandas in /usr/local/lib/python3.7/dist-packages (0.10.2)\n",
            "Requirement already satisfied: mapclassify in /usr/local/lib/python3.7/dist-packages (2.4.3)\n",
            "Requirement already satisfied: osmnx in /usr/local/lib/python3.7/dist-packages (1.1.2)\n",
            "Requirement already satisfied: shapely>=1.6 in /usr/local/lib/python3.7/dist-packages (from geopandas) (1.8.2)\n",
            "Requirement already satisfied: fiona>=1.8 in /usr/local/lib/python3.7/dist-packages (from geopandas) (1.8.21)\n",
            "Requirement already satisfied: pandas>=0.25.0 in /usr/local/lib/python3.7/dist-packages (from geopandas) (1.3.5)\n",
            "Requirement already satisfied: pyproj>=2.2.0 in /usr/local/lib/python3.7/dist-packages (from geopandas) (3.2.1)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.7/dist-packages (from fiona>=1.8->geopandas) (2022.6.15)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from fiona>=1.8->geopandas) (57.4.0)\n",
            "Requirement already satisfied: cligj>=0.5 in /usr/local/lib/python3.7/dist-packages (from fiona>=1.8->geopandas) (0.7.2)\n",
            "Requirement already satisfied: six>=1.7 in /usr/local/lib/python3.7/dist-packages (from fiona>=1.8->geopandas) (1.15.0)\n",
            "Requirement already satisfied: munch in /usr/local/lib/python3.7/dist-packages (from fiona>=1.8->geopandas) (2.5.0)\n",
            "Requirement already satisfied: click>=4.0 in /usr/local/lib/python3.7/dist-packages (from fiona>=1.8->geopandas) (7.1.2)\n",
            "Requirement already satisfied: attrs>=17 in /usr/local/lib/python3.7/dist-packages (from fiona>=1.8->geopandas) (21.4.0)\n",
            "Requirement already satisfied: click-plugins>=1.0 in /usr/local/lib/python3.7/dist-packages (from fiona>=1.8->geopandas) (1.1.1)\n",
            "Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.25.0->geopandas) (2022.1)\n",
            "Requirement already satisfied: numpy>=1.17.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.25.0->geopandas) (1.21.6)\n",
            "Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.25.0->geopandas) (2.8.2)\n",
            "Requirement already satisfied: scipy>=1.0 in /usr/local/lib/python3.7/dist-packages (from mapclassify) (1.7.3)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.7/dist-packages (from mapclassify) (1.0.2)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.7/dist-packages (from mapclassify) (2.6.3)\n",
            "Requirement already satisfied: Rtree>=0.9 in /usr/local/lib/python3.7/dist-packages (from osmnx) (1.0.0)\n",
            "Requirement already satisfied: requests>=2.26 in /usr/local/lib/python3.7/dist-packages (from osmnx) (2.28.1)\n",
            "Requirement already satisfied: matplotlib>=3.4 in /usr/local/lib/python3.7/dist-packages (from osmnx) (3.5.2)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=3.4->osmnx) (4.34.4)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=3.4->osmnx) (0.11.0)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=3.4->osmnx) (21.3)\n",
            "Requirement already satisfied: pyparsing>=2.2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=3.4->osmnx) (3.0.9)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=3.4->osmnx) (7.1.2)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=3.4->osmnx) (1.4.3)\n",
            "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from kiwisolver>=1.0.1->matplotlib>=3.4->osmnx) (4.1.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests>=2.26->osmnx) (2.10)\n",
            "Requirement already satisfied: charset-normalizer<3,>=2 in /usr/local/lib/python3.7/dist-packages (from requests>=2.26->osmnx) (2.1.0)\n",
            "Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests>=2.26->osmnx) (1.24.3)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn->mapclassify) (3.1.0)\n",
            "Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn->mapclassify) (1.1.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# собрали импорты модулей\n",
        "import pandas as pd\n",
        "import geopandas as gpd\n",
        "import osmnx as ox"
      ],
      "metadata": {
        "id": "Cpn6YWHImmCz"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# перенесли стиль карт в константу, заменили хардкод в файле\n",
        "TILES = \"CartoDB positron\"\n",
        "\n",
        "# собрали все константы в одном месте\n",
        "TERRITORY_NAME = 'Колпинский район, Санкт-Петербург' #выбрали район Санкт-Петербурга\n",
        "STREETS_FILE_URL = \"https://drive.google.com/file/d/1bUT1E-QSbG1vpSNM2dOG2-LEVXSrPdo3/view?usp=sharing\"\n",
        "KGIOP_FILE_URL = \"https://raw.githubusercontent.com/pauligone/py.urban/main/kgiop_objects.geojson\" # ссылка на файл из github репозитория"
      ],
      "metadata": {
        "id": "4iT2LzegmfYz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def get_google_drive_download_url(url: str) -> str:\n",
        "    \"\"\"\n",
        "    Функция возвращает ссылку для скачивания с google drive.\n",
        "     Например: \"https://drive.google.com/file/d/1MWGOuqV76e0ubQOg8Ke0KTU3yGpkprHp/view?usp=sharing\" ->\n",
        "     \"https://drive.google.com/uc?export=download&id=1MWGOuqV76e0ubQOg8Ke0KTU3yGpkprHp\"\n",
        "    \"\"\"\n",
        "    drive_id = url.split(\"/\")[5]\n",
        "    return f\"https://drive.google.com/uc?export=download&id={drive_id}\""
      ],
      "metadata": {
        "id": "AuldR5kIm2GK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Территория"
      ],
      "metadata": {
        "id": "cTIgCuVU5uIT"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Загрузка территории из OSM (Extract)"
      ],
      "metadata": {
        "id": "RdQsk6TT9vgX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "territory = ox.geocode_to_gdf(TERRITORY_NAME)  # подгружаем с OSM и получаем GeoDataFrame\n",
        "territory.explore(tiles=TILES)"
      ],
      "metadata": {
        "id": "iT4LfNT7puN7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Обработка данных с территорией (Transform)"
      ],
      "metadata": {
        "id": "JP6KuMiC6iyh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# todo добавить столбец Название территории и удалить все остальные (кроме столбца geometry)"
      ],
      "metadata": {
        "id": "ZFdEpnFe8gJg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Улицы"
      ],
      "metadata": {
        "id": "K3VY8W4d93Yt"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Загрузка файла с улицами из google disk (Extract)"
      ],
      "metadata": {
        "id": "4mH1FBw4-GB5"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "SRXpUAvk5ONJ"
      },
      "outputs": [],
      "source": [
        "url = get_google_drive_download_url(STREETS_FILE_URL)\n",
        "gdf_streets = gpd.read_file(url, mask=territory)  # todo отфильтровать улицы по маске геометрии территории полученной ранее\n",
        "gdf_streets"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Обработка данных с улицами (Transform)"
      ],
      "metadata": {
        "id": "eC3YdkziAcaE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "tags = pd.json_normalize(gdf_streets[\"tags\"])\n",
        "tags"
      ],
      "metadata": {
        "id": "vakCsqnLeugj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "tags.info()"
      ],
      "metadata": {
        "id": "qK-KF5oyolIb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "extract_tags = [\n",
        "    \"name\"  # вытаскиваем имя из тегов в отдельный столбец name\n",
        "]\n",
        "\n",
        "gdf_streets = gdf_streets.join(tags[extract_tags])\n",
        "gdf_streets"
      ],
      "metadata": {
        "id": "osbbB-QWosFp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "gdf_streets.dropna(\n",
        "    how=\"all\",  # удаляем данные если отсутствуют значения во всех указанных столбцах\n",
        "    subset=[\"name\"],  # столбцы, в которых надо искать пропуски\n",
        "    inplace=True\n",
        ")\n",
        "gdf_streets"
      ],
      "metadata": {
        "id": "0VUn061VslUd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# проверяем наличие дубликатов по полям \"id\", \"geometry\", \"name\"\n",
        "gdf_streets.duplicated(subset=[\"id\", \"geometry\", \"name\"]).value_counts()"
      ],
      "metadata": {
        "id": "SBdzhiozIU8L"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "gdf_streets[\"name\"].is_unique"
      ],
      "metadata": {
        "id": "3ZseQgv9PyrJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "gdf_streets = gdf_streets.dissolve(by=\"name\")  # групируем и объединяем геометрии улиц с одинаковыми названиями\n",
        "gdf_streets"
      ],
      "metadata": {
        "id": "VQCJ9Z8aP_ZT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "gdf_streets.index.rename(\"Название улицы\", inplace=True) # проверяем\n",
        "gdf_streets.head()"
      ],
      "metadata": {
        "id": "jXky7pTPWmPx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# удаляем столбцы \"id\", \"type\" и \"tags\"\n",
        "drop_columns = [\n",
        "    \"id\",\n",
        "    \"type\", \n",
        "    \"tags\",\n",
        "]\n",
        "gdf_streets.drop(columns=drop_columns, inplace=True) \n",
        "gdf_streets.head()"
      ],
      "metadata": {
        "id": "R8mRd68qsQlE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "gdf_streets.explore(tiles=TILES)"
      ],
      "metadata": {
        "id": "qAAS544nuzUa"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Объекты культурного наследия"
      ],
      "metadata": {
        "id": "zqqWUNPzuJu0"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Загрузка объектов культурного наследия"
      ],
      "metadata": {
        "id": "473VG26vbdUX"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "u-NrRHTl5lmx"
      },
      "outputs": [],
      "source": [
        "gdf_kgiop_objects = gpd.read_file(KGIOP_FILE_URL, mask=territory)\n",
        "gdf_kgiop_objects"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# todo оставить только столбцы object_name, object_location, object_type"
      ],
      "metadata": {
        "id": "4mfpYfbV_cU7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "drop_columns = [\n",
        "    \"id\",\n",
        "    \"ensemble_name\", \n",
        "    \"occurrence_time\",\n",
        "    \"historical_category\",\n",
        "    \"normative_act\",\n",
        "]\n",
        "gdf_kgiop_objects.drop(columns=drop_columns, inplace=True)\n",
        "gdf_kgiop_objects.head() # оставляем только столбцы object_name, object_location, object_type"
      ],
      "metadata": {
        "id": "-OJbVFmCpim2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# todo переименовать столбцы object_name, object_location, object_type в русские названия"
      ],
      "metadata": {
        "id": "3IMdU0us_q0S"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "rename_columns = {\n",
        "    \"object_name\": \"Название\",\n",
        "    \"object_location\": \"Расположение\",\n",
        "    \"object_type\": \"Тип\",\n",
        "}\n",
        "gdf_kgiop_objects.rename(columns=rename_columns, inplace=True)\n",
        "gdf_kgiop_objects.head() # переименовываем столбцы object_name, object_location, object_type в русские названия"
      ],
      "metadata": {
        "id": "kGPNOQI6rJxE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "gdf_kgiop_objects.explore(tiles=TILES)"
      ],
      "metadata": {
        "id": "PEldtiIzu4Xr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "WAz_FXWJCsn0"
      },
      "outputs": [],
      "source": [
        "STREET_BUFFER = 100\n",
        "\n",
        "def get_contains_kgiop_objects(street) -> int:\n",
        "    \"\"\" Функция для подсчета количества объектов культурного наследия попадающих в буффер улицы\"\"\"\n",
        "    return sum(gdf_kgiop_objects[\"geometry\"].within(street.buffer(STREET_BUFFER)))\n",
        "\n",
        "\n",
        "gdf_streets[\"contains_kgiop_objects\"] = gdf_streets[\"geometry\"].apply(get_contains_kgiop_objects)\n",
        "gdf_streets.nlargest(5, \"contains_kgiop_objects\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "AalXVzWlJMtS"
      },
      "outputs": [],
      "source": [
        "gdf_streets.explore(\"contains_kgiop_objects\", tiles=TILES)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "hke6MsRtIDer"
      },
      "outputs": [],
      "source": [
        "gdf_streets[\"density\"] = gdf_streets[\"contains_kgiop_objects\"] / gdf_streets.length\n",
        "\n",
        "select_columns = []\n",
        "gdf_streets.nlargest(5, \"density\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# todo переименовать столбцы contains_kgiop_objects\tи density в русские названия"
      ],
      "metadata": {
        "id": "dTLNbOtuAizw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "m = gdf_streets.explore(\"contains_kgiop_objects\", tiles=TILES)\n",
        "m = territory.explore(m=m, style_kwds={\"fill\": False, \"weight\": 5})\n",
        "\n",
        "m"
      ],
      "metadata": {
        "id": "x86-_zC0IDSa"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# todo сохранить датафрейм gdf_streets в файл streets_with_contains_kgiop.geojson в формате geojson\n"
      ],
      "metadata": {
        "id": "9Dpv_9sEzGV-"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
